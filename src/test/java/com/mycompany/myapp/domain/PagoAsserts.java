package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PagoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPagoAllPropertiesEquals(Pago expected, Pago actual) {
        assertPagoAutoGeneratedPropertiesEquals(expected, actual);
        assertPagoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPagoAllUpdatablePropertiesEquals(Pago expected, Pago actual) {
        assertPagoUpdatableFieldsEquals(expected, actual);
        assertPagoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPagoAutoGeneratedPropertiesEquals(Pago expected, Pago actual) {
        assertThat(expected)
            .as("Verify Pago auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPagoUpdatableFieldsEquals(Pago expected, Pago actual) {
        assertThat(expected)
            .as("Verify Pago relevant properties")
            .satisfies(e -> assertThat(e.getMonto()).as("check monto").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getMonto()))
            .satisfies(e -> assertThat(e.getFechaPago()).as("check fechaPago").isEqualTo(actual.getFechaPago()))
            .satisfies(e -> assertThat(e.getMetodoPago()).as("check metodoPago").isEqualTo(actual.getMetodoPago()))
            .satisfies(e -> assertThat(e.getEstado()).as("check estado").isEqualTo(actual.getEstado()))
            .satisfies(e -> assertThat(e.getCitaId()).as("check citaId").isEqualTo(actual.getCitaId()))
            .satisfies(e -> assertThat(e.getCarritoId()).as("check carritoId").isEqualTo(actual.getCarritoId()))
            .satisfies(e -> assertThat(e.getUserId()).as("check userId").isEqualTo(actual.getUserId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPagoUpdatableRelationshipsEquals(Pago expected, Pago actual) {
        // empty method
    }
}
