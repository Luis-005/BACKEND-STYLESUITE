package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EstablecimientoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEstablecimientoAllPropertiesEquals(Establecimiento expected, Establecimiento actual) {
        assertEstablecimientoAutoGeneratedPropertiesEquals(expected, actual);
        assertEstablecimientoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEstablecimientoAllUpdatablePropertiesEquals(Establecimiento expected, Establecimiento actual) {
        assertEstablecimientoUpdatableFieldsEquals(expected, actual);
        assertEstablecimientoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEstablecimientoAutoGeneratedPropertiesEquals(Establecimiento expected, Establecimiento actual) {
        assertThat(expected)
            .as("Verify Establecimiento auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEstablecimientoUpdatableFieldsEquals(Establecimiento expected, Establecimiento actual) {
        assertThat(expected)
            .as("Verify Establecimiento relevant properties")
            .satisfies(e -> assertThat(e.getNombre()).as("check nombre").isEqualTo(actual.getNombre()))
            .satisfies(e -> assertThat(e.getDireccion()).as("check direccion").isEqualTo(actual.getDireccion()))
            .satisfies(e -> assertThat(e.getTelefono()).as("check telefono").isEqualTo(actual.getTelefono()))
            .satisfies(e -> assertThat(e.getCorreoElectronico()).as("check correoElectronico").isEqualTo(actual.getCorreoElectronico()))
            .satisfies(e -> assertThat(e.getUrlImg()).as("check urlImg").isEqualTo(actual.getUrlImg()))
            .satisfies(e -> assertThat(e.getHoraApertura()).as("check horaApertura").isEqualTo(actual.getHoraApertura()))
            .satisfies(e -> assertThat(e.getHoraCierre()).as("check horaCierre").isEqualTo(actual.getHoraCierre()))
            .satisfies(e -> assertThat(e.getUserId()).as("check userId").isEqualTo(actual.getUserId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEstablecimientoUpdatableRelationshipsEquals(Establecimiento expected, Establecimiento actual) {
        // empty method
    }
}
